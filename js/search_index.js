var search_data = {"index":{"searchIndex":["cff","apaformatter","bibtexformatter","entity","file","formatter","model","modelpart","person","reference","util","add_language()","authors()","authors()","authors=()","authors=()","combine_authors()","combine_authors()","combine_authors()","comment=()","contact()","contact()","contact=()","contact=()","date_accessed=()","date_downloaded=()","date_end=()","date_present?()","date_published=()","date_released=()","date_released=()","date_start=()","editors()","editors=()","editors_series()","editors_series=()","format()","format()","format_author()","format_author()","generate_reference()","initials()","keywords()","keywords()","keywords=()","keywords=()","languages()","license=()","new()","new()","new()","new()","new()","open()","pair()","patent_states()","patent_states=()","present?()","read()","recipients()","recipients=()","references()","references=()","required_fields?()","reset_languages()","senders()","senders=()","status=()","to_apalike()","to_bibtex()","translators()","translators=()","try_get_month()","try_get_year()","type=()","write()","write()","changes","licence","readme"],"longSearchIndex":["cff","cff::apaformatter","cff::bibtexformatter","cff::entity","cff::file","cff::formatter","cff::model","cff::modelpart","cff::person","cff::reference","cff::util","cff::reference#add_language()","cff::model#authors()","cff::reference#authors()","cff::model#authors=()","cff::reference#authors=()","cff::apaformatter::combine_authors()","cff::bibtexformatter::combine_authors()","cff::formatter::combine_authors()","cff::file#comment=()","cff::model#contact()","cff::reference#contact()","cff::model#contact=()","cff::reference#contact=()","cff::reference#date_accessed=()","cff::reference#date_downloaded=()","cff::entity#date_end=()","cff::formatter::date_present?()","cff::reference#date_published=()","cff::model#date_released=()","cff::reference#date_released=()","cff::entity#date_start=()","cff::reference#editors()","cff::reference#editors=()","cff::reference#editors_series()","cff::reference#editors_series=()","cff::apaformatter::format()","cff::bibtexformatter::format()","cff::apaformatter::format_author()","cff::bibtexformatter::format_author()","cff::bibtexformatter::generate_reference()","cff::formatter::initials()","cff::model#keywords()","cff::reference#keywords()","cff::model#keywords=()","cff::reference#keywords=()","cff::reference#languages()","cff::reference#license=()","cff::entity::new()","cff::file::new()","cff::model::new()","cff::person::new()","cff::reference::new()","cff::file::open()","cff::bibtexformatter::pair()","cff::reference#patent_states()","cff::reference#patent_states=()","cff::formatter::present?()","cff::file::read()","cff::reference#recipients()","cff::reference#recipients=()","cff::model#references()","cff::model#references=()","cff::formatter::required_fields?()","cff::reference#reset_languages()","cff::reference#senders()","cff::reference#senders=()","cff::reference#status=()","cff::model#to_apalike()","cff::model#to_bibtex()","cff::reference#translators()","cff::reference#translators=()","cff::formatter::try_get_month()","cff::formatter::try_get_year()","cff::reference#type=()","cff::file::write()","cff::file#write()","","",""],"info":[["CFF","","CFF.html","","<p>This library provides a Ruby interface to manipulate CITATION.cff files. The\nprimary entry points are ...\n"],["CFF::ApaFormatter","","CFF/ApaFormatter.html","","<p>Generates an APALIKE citation string\n"],["CFF::BibtexFormatter","","CFF/BibtexFormatter.html","","<p>Generates an BibTex citation string\n"],["CFF::Entity","","CFF/Entity.html","","<p>An Entity can represent different types of entities, e.g., a publishing\ncompany, or conference. Like ...\n"],["CFF::File","","CFF/File.html","","<p>File provides direct access to a CFF Model, with the addition of some\nfilesystem utilities.\n"],["CFF::Formatter","","CFF/Formatter.html","","<p>Formatter base class\n"],["CFF::Model","","CFF/Model.html","","<p>Model is the core data structure for a CITATION.cff file. It can be\naccessed direcly, or via File.\n<p>Model …\n"],["CFF::ModelPart","","CFF/ModelPart.html","","<p>ModelPart is the superclass of anything that makes up part of the CFF Model.\nThis includes Model, Person ...\n"],["CFF::Person","","CFF/Person.html","","<p>A Person represents a person in a CITATION.cff file. A Person might have a\nnumber of roles, such as author, ...\n"],["CFF::Reference","","CFF/Reference.html","","<p>Reference provides a reference pertaining to the software version or the\nsoftware itself, e.g., a software ...\n"],["CFF::Util","","CFF/Util.html","","<p>Util provides utility methods useful throughout the rest of the CFF library.\n<p>Util does not provide any …\n"],["add_language","CFF::Reference","CFF/Reference.html#method-i-add_language","(lang)","<p>Add a language to this Reference. Input is converted to the ISO 639-3\nthree letter language code, so ...\n"],["authors","CFF::Model","CFF/Model.html#method-i-authors","","<p>Return the list of authors for this citation. To add an author to the\nlist, use:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">model</span>.<span class=\"ruby-identifier\">authors</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-identifier\">author</span>\n</pre>\n"],["authors","CFF::Reference","CFF/Reference.html#method-i-authors","","<p>Return the list of authors for this Reference. To add an author to the\nlist, use:\n\n<pre>reference.authors &lt;&lt; ...</pre>\n"],["authors=","CFF::Model","CFF/Model.html#method-i-authors-3D","","<p>Replace the list of authors for this citation.\n<p>Authors can be a Person or Entity.\n"],["authors=","CFF::Reference","CFF/Reference.html#method-i-authors-3D","","<p>Replace the list of authors for this reference.\n<p>Authors can be a Person or Entity.\n"],["combine_authors","CFF::ApaFormatter","CFF/ApaFormatter.html#method-c-combine_authors","(authors)",""],["combine_authors","CFF::BibtexFormatter","CFF/BibtexFormatter.html#method-c-combine_authors","(authors)",""],["combine_authors","CFF::Formatter","CFF/Formatter.html#method-c-combine_authors","(authors)",""],["comment=","CFF::File","CFF/File.html#method-i-comment-3D","(comment)","<p>A comment to be inserted at the top of the resultant CFF file. This can\nbe supplied as a simple string ...\n"],["contact","CFF::Model","CFF/Model.html#method-i-contact","","<p>Return the list of contacts for this citation. To add a contact to the\nlist, use:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">model</span>.<span class=\"ruby-identifier\">contact</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-identifier\">contact</span>\n</pre>\n"],["contact","CFF::Reference","CFF/Reference.html#method-i-contact","","<p>Return the list of contacts for this Reference. To add a contact to the\nlist, use:\n\n<pre>reference.contact &lt;&lt; ...</pre>\n"],["contact=","CFF::Model","CFF/Model.html#method-i-contact-3D","","<p>Replace the list of contacts for this citation.\n<p>Contacts can be a Person or Entity.\n"],["contact=","CFF::Reference","CFF/Reference.html#method-i-contact-3D","","<p>Replace the list of contacts for this reference.\n<p>Contacts can be a Person or Entity.\n"],["date_accessed=","CFF::Reference","CFF/Reference.html#method-i-date_accessed-3D","(date)","<p>Set the <code>date-accessed</code> field. If a non-Date object is passed in it will\nbe parsed into a Date.\n"],["date_downloaded=","CFF::Reference","CFF/Reference.html#method-i-date_downloaded-3D","(date)","<p>Set the <code>date-downloaded</code> field. If a non-Date object is passed in it will\nbe parsed into a Date.\n"],["date_end=","CFF::Entity","CFF/Entity.html#method-i-date_end-3D","(date)","<p>Set the <code>date-end</code> field. If a non-Date object is passed in it will\nbe parsed into a Date.\n"],["date_present?","CFF::Formatter","CFF/Formatter.html#method-c-date_present-3F","(attribute)",""],["date_published=","CFF::Reference","CFF/Reference.html#method-i-date_published-3D","(date)","<p>Set the <code>date-published</code> field. If a non-Date object is passed in it will\nbe parsed into a Date.\n"],["date_released=","CFF::Model","CFF/Model.html#method-i-date_released-3D","(date)","<p>Set the <code>date-released</code> field. If a non-Date object is passed in it will\nbe parsed into a Date.\n"],["date_released=","CFF::Reference","CFF/Reference.html#method-i-date_released-3D","(date)","<p>Set the <code>date-released</code> field. If a non-Date object is passed in it will\nbe parsed into a Date.\n"],["date_start=","CFF::Entity","CFF/Entity.html#method-i-date_start-3D","(date)","<p>Set the <code>date-start</code> field. If a non-Date object is passed in it will\nbe parsed into a Date.\n"],["editors","CFF::Reference","CFF/Reference.html#method-i-editors","","<p>Return the list of editors for this Reference. To add an editor to the\nlist, use:\n\n<pre>reference.editors &lt;&lt; ...</pre>\n"],["editors=","CFF::Reference","CFF/Reference.html#method-i-editors-3D","","<p>Replace the list of editors for this reference.\n<p>Editors can be a Person or Entity.\n"],["editors_series","CFF::Reference","CFF/Reference.html#method-i-editors_series","","<p>Return the list of series editors for this Reference. To add a series\neditor to the list, use:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">reference</span>.<span class=\"ruby-identifier\">editors_series</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["editors_series=","CFF::Reference","CFF/Reference.html#method-i-editors_series-3D","","<p>Replace the list of series editors for this reference.\n<p>Series editors can be a Person or Entity.\n"],["format","CFF::ApaFormatter","CFF/ApaFormatter.html#method-c-format","(model:)",""],["format","CFF::BibtexFormatter","CFF/BibtexFormatter.html#method-c-format","(model:)",""],["format_author","CFF::ApaFormatter","CFF/ApaFormatter.html#method-c-format_author","(author)",""],["format_author","CFF::BibtexFormatter","CFF/BibtexFormatter.html#method-c-format_author","(author)",""],["generate_reference","CFF::BibtexFormatter","CFF/BibtexFormatter.html#method-c-generate_reference","(fields)",""],["initials","CFF::Formatter","CFF/Formatter.html#method-c-initials","(name)",""],["keywords","CFF::Model","CFF/Model.html#method-i-keywords","","<p>Return the list of keywords for this citation. To add a keyword to the\nlist, use:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">model</span>.<span class=\"ruby-identifier\">keywords</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-identifier\">keyword</span>\n</pre>\n"],["keywords","CFF::Reference","CFF/Reference.html#method-i-keywords","","<p>Return the list of keywords for this reference. To add a keyword to the\nlist, use:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">model</span>.<span class=\"ruby-identifier\">keywords</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-identifier\">keyword</span>\n</pre>\n"],["keywords=","CFF::Model","CFF/Model.html#method-i-keywords-3D","","<p>Replace the list of keywords for this citation.\n<p>Keywords will be converted to Strings on output.\n"],["keywords=","CFF::Reference","CFF/Reference.html#method-i-keywords-3D","","<p>Replace the list of keywords for this reference.\n<p>Keywords will be converted to Strings on output.\n"],["languages","CFF::Reference","CFF/Reference.html#method-i-languages","()","<p>Return the list of languages associated with this Reference.\n"],["license=","CFF::Reference","CFF/Reference.html#method-i-license-3D","(lic)","<p>Set the license of this Reference. Only licenses that conform to the\nSPDX License List will be accepted. ...\n"],["new","CFF::Entity","CFF/Entity.html#method-c-new","(param)","<p>Create a new Entity with the supplied name.\n"],["new","CFF::File","CFF/File.html#method-c-new","(filename, param, comment = CFF_COMMENT, create: false)","<p>Create a new File. Either a pre-existing Model can be passed in or, as\nwith Model itself, a title can ...\n"],["new","CFF::Model","CFF/Model.html#method-c-new","(param)","<p>Initialize a new Model with the supplied title.\n"],["new","CFF::Person","CFF/Person.html#method-c-new","(param, *more)","<p>Create a new Person with the supplied given and family names.\n"],["new","CFF::Reference","CFF/Reference.html#method-c-new","(param, *more)","<p>Create a new Reference with the supplied title and, optionally, type.\nIf type is not given, or is not ...\n"],["open","CFF::File","CFF/File.html#method-c-open","(file)","<p>With no associated block, File.open is a synonym for ::read. If the\noptional code block is given, it ...\n"],["pair","CFF::BibtexFormatter","CFF/BibtexFormatter.html#method-c-pair","(key:, value:)",""],["patent_states","CFF::Reference","CFF/Reference.html#method-i-patent_states","","<p>Return the list of patent states for this reference. To add a patent\nstate to the list, use:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">model</span>.<span class=\"ruby-identifier\">patent_states</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["patent_states=","CFF::Reference","CFF/Reference.html#method-i-patent_states-3D","","<p>Replace the list of patent states for this reference.\n<p>Patent states will be converted to Strings on output. …\n"],["present?","CFF::Formatter","CFF/Formatter.html#method-c-present-3F","(attribute)",""],["read","CFF::File","CFF/File.html#method-c-read","(file)","<p>Read a file and parse it for subsequent manipulation.\n"],["recipients","CFF::Reference","CFF/Reference.html#method-i-recipients","","<p>Return the list of recipients for this Reference. To add a recipient\nto the list, use:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">reference</span>.<span class=\"ruby-identifier\">recipients</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["recipients=","CFF::Reference","CFF/Reference.html#method-i-recipients-3D","","<p>Replace the list of recipients for this reference.\n<p>Recipients can be a Person or Entity.\n"],["references","CFF::Model","CFF/Model.html#method-i-references","","<p>Return the list of references for this citation. To add a reference to the\nlist, use:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">model</span>.<span class=\"ruby-identifier\">references</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["references=","CFF::Model","CFF/Model.html#method-i-references-3D","","<p>Replace the list of references for this citation.\n"],["required_fields?","CFF::Formatter","CFF/Formatter.html#method-c-required_fields-3F","(model)",""],["reset_languages","CFF::Reference","CFF/Reference.html#method-i-reset_languages","()","<p>Reset the list of languages for this Reference to be empty.\n"],["senders","CFF::Reference","CFF/Reference.html#method-i-senders","","<p>Return the list of senders for this Reference. To add a sender to the\nlist, use:\n\n<pre>reference.senders &lt;&lt; ...</pre>\n"],["senders=","CFF::Reference","CFF/Reference.html#method-i-senders-3D","","<p>Replace the list of senders for this reference.\n<p>Senders can be a Person or Entity.\n"],["status=","CFF::Reference","CFF/Reference.html#method-i-status-3D","(status)","<p>Sets the status of this Reference. The status is restricted to a\ndefined set of status types.\n"],["to_apalike","CFF::Model","CFF/Model.html#method-i-to_apalike","()",""],["to_bibtex","CFF::Model","CFF/Model.html#method-i-to_bibtex","()",""],["translators","CFF::Reference","CFF/Reference.html#method-i-translators","","<p>Return the list of translators for this Reference. To add a translator\nto the list, use:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">reference</span>.<span class=\"ruby-identifier\">translators</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["translators=","CFF::Reference","CFF/Reference.html#method-i-translators-3D","","<p>Replace the list of translators for this reference.\n<p>Translators can be a Person or Entity.\n"],["try_get_month","CFF::Formatter","CFF/Formatter.html#method-c-try_get_month","(value)",""],["try_get_year","CFF::Formatter","CFF/Formatter.html#method-c-try_get_year","(value)",""],["type=","CFF::Reference","CFF/Reference.html#method-i-type-3D","(type)","<p>Sets the type of this Reference. The type is restricted to a\ndefined set of reference types.\n"],["write","CFF::File","CFF/File.html#method-c-write","(file, cff, comment = '')","<p>Write the supplied model or yaml string to <code>file</code>.\n"],["write","CFF::File","CFF/File.html#method-i-write","()","<p>Write this CFF File.\n"],["CHANGES","","CHANGES_md.html","","<p>Changes log for the Ruby CFF Library\n<p>Version 0.4.0\n<p>Remove unused Util#expand_field method.\n"],["LICENCE","","LICENCE.html","","\n<pre>         Apache License\n   Version 2.0, January 2004\nhttp://www.apache.org/licenses/</pre>\n<p>TERMS AND CONDITIONS …\n"],["README","","README_md.html","","<p>Ruby CFF\n<p>Robert Haines\n<p>A Ruby library for manipulating CITATION.cff files.\n"]]}}